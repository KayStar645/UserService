// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UserService.Infrastructure.Persistence;

#nullable disable

namespace UserService.Infrastructure.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20250504140314_UpdatePassIsNull")]
    partial class UpdatePassIsNull
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UserService.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<string>("BranchId")
                        .HasColumnType("text")
                        .HasColumnOrder(2);

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CompanyId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(6);

                    b.Property<string>("CreatedByCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnOrder(4);

                    b.Property<string>("CreatedByUser")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean")
                        .HasColumnOrder(3);

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(9);

                    b.Property<string>("LastModifiedByCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnOrder(7);

                    b.Property<string>("LastModifiedByUser")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnOrder(8);

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId", "BranchId");

                    b.HasIndex("Code", "CompanyId", "BranchId")
                        .IsUnique()
                        .HasFilter("\"IsRemoved\" = false");

                    b.ToTable("Permission", (string)null);
                });

            modelBuilder.Entity("UserService.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<string>("BranchId")
                        .HasColumnType("text")
                        .HasColumnOrder(2);

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CompanyId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(6);

                    b.Property<string>("CreatedByCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnOrder(4);

                    b.Property<string>("CreatedByUser")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean")
                        .HasColumnOrder(3);

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(9);

                    b.Property<string>("LastModifiedByCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnOrder(7);

                    b.Property<string>("LastModifiedByUser")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnOrder(8);

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId", "BranchId");

                    b.HasIndex("Code", "CompanyId", "BranchId")
                        .IsUnique()
                        .HasFilter("\"IsRemoved\" = false");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("UserService.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(4);

                    b.Property<string>("CreatedByCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnOrder(2);

                    b.Property<string>("CreatedByUser")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnOrder(3);

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(7);

                    b.Property<string>("LastModifiedByCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnOrder(5);

                    b.Property<string>("LastModifiedByUser")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnOrder(6);

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId");

                    b.ToTable("RolePermission", (string)null);
                });

            modelBuilder.Entity("UserService.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("BranchId")
                        .HasColumnType("text")
                        .HasColumnOrder(2);

                    b.Property<string>("CompanyId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(6);

                    b.Property<string>("CreatedByCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnOrder(4);

                    b.Property<string>("CreatedByUser")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnOrder(5);

                    b.Property<DateTimeOffset?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(190)
                        .HasColumnType("character varying(190)");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(3);

                    b.Property<bool>("IsEmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(9);

                    b.Property<string>("LastModifiedByCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnOrder(7);

                    b.Property<string>("LastModifiedByUser")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnOrder(8);

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.HasIndex("CompanyId", "BranchId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("UserService.Domain.Entities.UserPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(4);

                    b.Property<string>("CreatedByCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnOrder(2);

                    b.Property<string>("CreatedByUser")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnOrder(3);

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(7);

                    b.Property<string>("LastModifiedByCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnOrder(5);

                    b.Property<string>("LastModifiedByUser")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnOrder(6);

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId", "PermissionId");

                    b.ToTable("UserPermission", (string)null);
                });

            modelBuilder.Entity("UserService.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(4);

                    b.Property<string>("CreatedByCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnOrder(2);

                    b.Property<string>("CreatedByUser")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnOrder(3);

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(7);

                    b.Property<string>("LastModifiedByCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnOrder(5);

                    b.Property<string>("LastModifiedByUser")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnOrder(6);

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("UserService.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("UserService.Domain.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UserService.Domain.Entities.UserPermission", b =>
                {
                    b.HasOne("UserService.Domain.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.Domain.Entities.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserService.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("UserService.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserService.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("UserService.Domain.Entities.User", b =>
                {
                    b.Navigation("UserPermissions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
